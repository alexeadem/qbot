#!/usr/bin/env bash

# redpanda
# https://docs.redpanda.com/current/deploy/deployment-option/self-hosted/kubernetes/local-guide/

#################################
# include -=qbot=-
# you can pass command line args
#
# example:
# to disable simulated typing
# . ../qbot.sh -d
#
# pass -h to see all options
#################################


ENV_FILE="./env"

# Check if the .env file exists
if [[ ! -f "$ENV_FILE" ]]; then
    echo "ERROR: $ENV_FILE not found"
    exit 1
fi

# Source the .env file
set -o allexport
source "$ENV_FILE"
set +o allexport

# Validate required variables
MISSING_VARS=()
REQUIRED_VARS=("DOMAIN" "CLIENT_ID" "CLIENT_SECRET")

for VAR in "${REQUIRED_VARS[@]}"; do
    if [[ -z "${!VAR}" ]]; then
        MISSING_VARS+=("$VAR")
    fi
done

# If any variables are missing, print an error and exit
if [[ ${#MISSING_VARS[@]} -gt 0 ]]; then
    echo "ERROR: Missing required variables in $ENV_FILE"
    for VAR in "${MISSING_VARS[@]}"; do
        echo "   - $VAR"
    done
    exit 1
fi

sudo apt update && sudo apt install -y gettext


shopt -s expand_aliases
. ../qbot.sh

bold_green_prefix="\033[1;32m"
bold_green_suffix="\033[0m"

KUBECTL=/usr/bin/kubectl
DOCKER=/usr/bin/docker
CURL=/usr/bin/curl

if type getent > /dev/null 2>&1; then
    g=$(getent group docker | awk -F ':' '{print $3}')
else
    g=$(cat /etc/group | grep docker: | awk -F ':' '{print $3}')
fi

########################
# Configure the options
########################
#
# speed at which to simulate typing. bigger num = faster
#
TYPE_SPEED=20

DEMO=$(basename "$PWD")
if [ -z $DEMO ]; then
    echo "$0 {name}"
    exit 1
fi

pb() {
    local w=80 p=$1;  shift
    # create a string of spaces, then change them to dots
    printf -v dots "%*s" "$(($p))" " "; dots=${dots// /▇};
    printf "\r\e[K %3d s | %-*s"  "$p" "$*" "$dots" ;
}


DEMO=$(basename "$PWD")
DEMO_PROMPT="\e[0;38;5;250;48;5;235;1m  ☐ \e[0;38;5;235;48;5;240;22m \e[0;38;5;231;48;5;240mqbot \e[0;38;5;240;48;5;235;1m\e[0;38;5;250;48;5;235;1m $DEMO \e[0;38;5;235;1m \e[0m"

# hide the evidence
# clear # requires ncurses-bin
printf "\033c"

CLI_IMAGE=levitas/cli:latest
if [ -f /.dockerenv ]; then
    alias qbo=cli
else
    alias qbo="docker run --rm --name qbo-cli -e QBO_HOST=$QBO_HOST -e QBO_PORT=$QBO_PORT -e QBO_UID=$QBO_UID -e QBO_AUX=$QBO_AUX --network host -i -v ~/.qbo:/tmp/qbo $CLI_IMAGE cli"
fi

NAME=$DEMO
#NAME=2d1a5414-b2e5-4e3e-b3f3-67fa5254fbb1
pe "qbo version | jq .version[]?"

C=$(qbo get cluster $NAME | jq -e '.clusters[]?')
if [ -z "$C" ]; then
        pe "qbo add cluster $NAME -n 3 -i hub.docker.com/kindest/node:v1.32.0 | jq"
else
        echo $C | jq
fi
pe "qbo get nodes $NAME | jq .nodes[]?"

V=$(qbo version | jq -r '.version[]?.qbo | select( . != null)')
CE="api-.*:ce-"
if [[ "$V" =~ $CE ]]; then
    V="ce"
else
    V="cloud"
fi
if [ "$V" = "ce" ]; then
    pe "export KUBECONFIG=/tmp/qbo/$NAME.conf"
else
    :  
    #pe "qbo get cluster $NAME -k | jq -r '.output[]?.kubeconfig | select( . != null)' > $HOME/.qbo/$NAME.conf"
    #pe "export KUBECONFIG=$HOME/.qbo/$NAME.conf"
fi

#pe "$KUBECTL get nodes"

# https://crt.sh/?q=eadem.com
# https://letsdebug.net/

# helm
envsubst < values.envsubst > values.yaml


#pe "helm repo add gitlab https://charts.gitlab.io/"
#pe "helm repo update"
#pe "cat values.yaml"
#pe "helm upgrade --install gitlab gitlab/gitlab -f values.yaml"

#pe "helm upgrade --install gitlab gitlab/gitlab -f values.yaml --set global.ingress.tls.enabled=true --set global.ingress.tls.secretName=gitlab-tls"
# --timeout 600s --set certmanager.install=false --set global.ingress.configureCertmanager=false --set global.ingress.tls.secretName=wildcard-tls"
#helm get values gitlab -n default

# wildcard certs 
pe "qbo get acme -A | jq -r .acmes[]?.privkey | base64 -w 0"
echo
pe "qbo get acme -A | jq -r .acmes[]?.fullchain | base64 -w 0"
echo
#sleep 3
#KEY_CONTENT=$(qbo get acme -A 2>/dev/null | jq -r .acmes[]?.privkey | base64 -w 0)
KEY=$(qbo get acme -A 2>/dev/null | jq -r .acmes[]?.privkey | base64 -w 0 || echo "ERROR")
CRT=$(qbo get acme -A 2>/dev/null | jq -r .acmes[]?.fullchain | base64 -w 0 || echo "ERROR")

echo "KEY"
echo $KEY
echo "CRT"
echo $CRT
#exit 0
kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: wildcard-tls
  namespace: default
type: kubernetes.io/tls
data:
  tls.crt: ${CRT}
  tls.key: ${KEY}
EOF

pe "kubectl get secret wildcard-tls -n default -o jsonpath=\"{.data.tls\.crt}\" | base64 -d"
pe "kubectl get secret wildcard-tls -n default -o jsonpath=\"{.data.tls\.key}\" | base64 -d"

#kubectl delete secret gitlab-google-oauth2 -n default --ignore-not-found
pe "kubectl create secret generic gitlab-google-oauth2 --from-literal=google_oauth2='{\"name\":\"google_oauth2\",\"label\":\"Google\",\"app_id\":\"$CLIENT_ID\",\"app_secret\":\"$CLIENT_SECRET\",\"args\":{\"access_type\":\"offline\",\"approval_prompt\":\"\"}}' --namespace=default"

kubectl get secret gitlab-google-oauth2 -o jsonpath='{.data.google_oauth2}' | base64 --decode | jq

echo "To enable Google OAuth authentication for GitLab, you need to configure OAuth credentials in Google Cloud Console."

echo -e "\n\033[1mAuthorized redirect URIs:\033[0m"

printf "\n\033[34m%-10s %-50s\033[0m\n" "1" "https://gitlab.$DOMAIN/users/auth/google_oauth2/callback"
printf "\033[34m%-10s %-50s\033[0m\n" "2" "https://gitlab.$DOMAIN/-/google_api/auth/callback"

LB=$(kubectl get svc gitlab-nginx-ingress-controller -n default --ignore-not-found -o json | jq -r '.spec.externalIPs[0] | select ( . != null)')
pe "kubectl get secret gitlab-gitlab-initial-root-password -ojsonpath='{.data.password}' | base64 --decode ; echo"
PASSWORD=$(kubectl get secret gitlab-gitlab-initial-root-password -ojsonpath='{.data.password}' | base64 --decode ; echo)

# Print DNS Setup Instructions
echo -e "\n\033[1mDNS Records Required for Cert-Manager:\033[0m"
echo "These A records must be created before Cert-Manager can generate TLS certificates."
echo "Ensure that they are properly configured in your DNS provider."

# Print DNS Records
printf "\n\033[1m%-8s %-22s %-30s %-15s\033[0m\n" "Type" "Data" "Host" "Service"
printf -- "----------------------------------------------------------------------------\n"
printf "\033[34m%-8s\033[0m \033[34m%-22s\033[0m \033[34m%-30s\033[0m \033[34m%-15s\033[0m\n" "A" "$LB" "registry.$DOMAIN" "Registry"
printf "\033[34m%-8s\033[0m \033[34m%-22s\033[0m \033[34m%-30s\033[0m \033[34m%-15s\033[0m\n" "A" "$LB" "gitlab.$DOMAIN" "Web"
printf "\033[34m%-8s\033[0m \033[34m%-22s\033[0m \033[34m%-30s\033[0m \033[34m%-15s\033[0m\n" "A" "$LB" "*.$DOMAIN" "Pages"

# Print DNS Verification Instructions
printf "\n"
echo "Use the following commands to check if the DNS records have propagated:"
echo "  nslookup gitlab.$DOMAIN"
echo "  nslookup registry.$DOMAIN"
echo "If these commands return the correct IP address ($LB), Cert-Manager should be able to generate certificates."

# Print Access Instructions
echo -e "\n\033[1mAccess GitLab After TLS is Ready:\033[0m"
echo "Once Cert-Manager has successfully issued certificates, you can access GitLab using these credentials."

# Print GitLab Credentials
printf "\n\033[1m%-10s %-30s\033[0m\n" "USER" "root"
printf "\033[1m%-10s %-30s\033[0m\n" "PASSWORD" "$PASSWORD"
printf "\033[1m%-10s %-30s\033[0m\n" "URL" "https://gitlab.$DOMAIN"

echo -e "\n\033[1mNote:\033[0m If you see SSL certificate warnings, wait for Cert-Manager to complete the issuance process."
echo "You can check the status of the certificate with:"
echo "  kubectl get certificate -A"
echo -e "\nOnce the certificate is ready, visit \033[1mhttps://gitlab.$DOMAIN\033[0m in your browser.\n"

# rollout
pe "kubectl rollout restart deployment gitlab-webservice-default -n default"
pe "kubectl rollout restart deployment gitlab-toolbox -n default"
pe "kubectl rollout restart deployment gitlab-sidekiq-all-in-1-v2 -n default"

pe "watch kubectl get pods"
pe "kubectl get pvc"
pe "kubectl get ingress"
#pe "kubectl get issuer"
#pe "kubectl describe issuer gitlab-issuer"
#pe "kubectl describe certificate,order,challenge --all-namespaces"

# show a prompt so as not to reveal our true nature after
# the demo has concluded

p ""

