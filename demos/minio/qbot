#!/usr/bin/env bash

# redpanda
# https://docs.redpanda.com/current/deploy/deployment-option/self-hosted/kubernetes/local-guide/

#################################
# include -=qbot=-
# you can pass command line args
#
# example:
# to disable simulated typing
# . ../qbot.sh -d
#
# pass -h to see all options
#################################
shopt -s expand_aliases
. ../qbot.sh

bold_green_prefix="\033[1;32m"
bold_green_suffix="\033[0m"

KUBECTL=/usr/bin/kubectl
DOCKER=/usr/bin/docker
CURL=/usr/bin/curl


if type getent > /dev/null 2>&1; then
    g=$(getent group docker | awk -F ':' '{print $3}')
else
    g=$(cat /etc/group | grep docker: | awk -F ':' '{print $3}')
fi

########################
# Configure the options
########################
#
# speed at which to simulate typing. bigger num = faster
#
TYPE_SPEED=20

DEMO=$(basename "$PWD")
if [ -z $DEMO ]; then
    echo "$0 {name}"
    exit 1
fi

pb() {
    local w=80 p=$1;  shift
    # create a string of spaces, then change them to dots
    printf -v dots "%*s" "$(($p))" " "; dots=${dots// /▇};
    printf "\r\e[K %3d s | %-*s"  "$p" "$*" "$dots" ;
}


DEMO=$(basename "$PWD")
DEMO_PROMPT="\e[0;38;5;250;48;5;235;1m  ☐ \e[0;38;5;235;48;5;240;22m \e[0;38;5;231;48;5;240mqbot \e[0;38;5;240;48;5;235;1m\e[0;38;5;250;48;5;235;1m $DEMO \e[0;38;5;235;1m \e[0m"

# hide the evidence
# clear # requires ncurses-bin
printf "\033c"

CLI_IMAGE=levitas/cli:latest
if [ -f /.dockerenv ]; then
    alias qbo=cli
else
    alias qbo="docker run --rm --name qbo-cli -e QBO_HOST=$QBO_HOST -e QBO_PORT=$QBO_PORT -e QBO_UID=$QBO_UID -e QBO_AUX=$QBO_AUX --network host -i -v ~/.qbo:/tmp/qbo $CLI_IMAGE cli"
fi

NAME=$DEMO
pe "qbo version | jq .version[]?"

C=$(qbo get cluster $NAME | jq -e '.clusters[]?')
if [ -z "$C" ]; then
        pe "qbo add cluster $NAME -n 4 -i hub.docker.com/kindest/node:v1.32.0 | jq"
else
        echo $C | jq
fi
pe "qbo get nodes $NAME | jq .nodes[]?"

V=$(qbo version | jq -r '.version[]?.qbo | select( . != null)')
CE="api-.*:ce-"
if [[ "$V" =~ $CE ]]; then
    V="ce"
else
    V="cloud"
fi
if [ "$V" = "ce" ]; then
    pe "export KUBECONFIG=/tmp/qbo/$NAME.conf"
else
    #:  
    pe "qbo get cluster $NAME -k | jq -r '.output[]?.kubeconfig | select( . != null)' > $HOME/.qbo/$NAME.conf"
    pe "export KUBECONFIG=$HOME/.qbo/$NAME.conf"
fi

pe "$KUBECTL get nodes"


#pe "kubectl create -f https://raw.githubusercontent.com/kubernetes/examples/master/staging/storage/minio/minio-standalone-pvc.yaml"
#pe "kubectl create -f https://raw.githubusercontent.com/kubernetes/examples/master/staging/storage/minio/minio-standalone-deployment.yaml"
#pe "kubectl create -f https://raw.githubusercontent.com/kubernetes/examples/master/staging/storage/minio/minio-standalone-service.yaml"


#pe "curl https://raw.githubusercontent.com/minio/docs/master/source/extra/examples/minio-dev.yaml -O"
#pe "kubectl apply -f minio-dev.yaml"


pe "cat distributed/minio-distributed-headless-service.yaml"
pe "kubectl apply -f distributed/minio-distributed-headless-service.yaml"

pe "cat distributed/minio-distributed-statefulset.yaml"
pe "kubectl apply -f distributed/minio-distributed-statefulset.yaml"

pe "cat distributed/minio-distributed-service.yaml"
pe "kubectl apply -f distributed/minio-distributed-service.yaml"

pe "watch kubectl get pods -n default"
pe "kubectl describe pod/minio-0 -n default"
#pe "kubectl logs pod/minio-0 -n default"
pe "kubectl get pvc"

export PATH="~/.local/bin:$PATH"
if ! command -v mc &> /dev/null
then
        ARCH=$(uname -m)

        # Map architecture names to the correct ArgoCD binary
        if [[ "$ARCH" == "x86_64" ]]; then
                ARCH="amd64"
        elif [[ "$ARCH" == "aarch64" ]]; then
                ARCH="arm64"
        else
                echo "Unsupported architecture: $ARCH"
                exit 1
        fi
        pe "cd ~"

	pe "curl -sSL -o mc https://dl.min.io/client/mc/release/linux-$ARCH/mc "
        pe "mkdir -p ~/.local/bin"
        pe "sudo install -m 555 mc ~/.local/bin/mc"
fi

# kubectl run busybox --image=busybox:latest --restart=Never -it --rm -- /bin/sh
# nslookup minio.default.svc.cluster.local

# kubectl rollout restart statefulset minio -n default
LB=$(kubectl get svc minio-service -n default --ignore-not-found -o json | jq -r '.spec.externalIPs[0] | select ( . != null)')

pe "kubectl run busybox --image=busybox:latest --restart=Never -it --rm -- nslookup minio.default.svc.cluster.local"
#qbo get ipvs -A | jq -r '.ipvs[]? | "sudo ip route add \(.vip) via \(.rip | sub("\\.[0-9]+$"; ".2"))"' | sort | uniq |  while read -r cmd; do $cmd; done
pe "curl -I http://$LB:9000"
pe "mc alias set myminio http://$LB:9000 minio minio123"
pe "mc admin info myminio"

pe "mc mb myminio/mybucket"
pe "echo \"Hello MinIO!\" > testfile.txt"
pe "mc cp testfile.txt myminio/mybucket/"
pe "mc ls myminio/mybucket/"


printf "\033[1m%-8s\033[0m %-22s\n" "USER" "minio"
printf "\033[1m%-8s\033[0m %-22s\n" "PASSWORD" "minio123"
printf "\033[1m%-8s\033[0m %-22s\n" "URL" "http://$LB:9001"

#mc alias set k8s-minio-dev http://$LB:9000 minioadmin minioadmin
#mc admin info k8s-minio-dev
# kubectl logs -l app=minio
# curl -I http://50.118.174.4:9000
# mc alias set myminio http://50.118.174.4:9000  minioadmin minioadmin
# show a prompt so as not to reveal our true nature after
# the demo has concluded

p ""

